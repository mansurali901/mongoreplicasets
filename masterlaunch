#!/bin/bash

BasicSetup () {

## Generating Mongo Key for authentication setup 
	openssl rand -base64 741 > mongo-keyfile
	chmod 600 mongo-keyfile
	docker volume create --name mongo_master
## Temporary Mongo Container to setup Pre requisites 
	docker run --name mongoNode1 -v mongo_master:/data -d mongo --smallfiles
## Creating required directories 
	docker exec mongoNode1 bash -c 'mkdir -p /data/keyfile /data/admin'

## Copying required files 
	echo "copying files"
	docker cp replica.js mongoNode1:/data/admin/
	docker cp admin.js mongoNode1:/data/admin/
	docker cp mongo-keyfile mongoNode1:/data/keyfile/
        docker cp rsstatus.js mongoNode1:/data/admin/
## Setting up file system permissions for mongo user
	docker exec mongoNode1 bash -c 'chown -R mongodb:mongodb /data'

## Removing temporary container 
	docker rm -f mongoNode1
	
}

MasterInit () {

## Spawing up main master container 
	docker run --name mongoNode1 --hostname mongoNode1 \
		-v mongo_master:/data \
		--env-file env \
		--add-host manager1:172.17.0.2 \
		--add-host mongoNode1:172.17.0.2 \
		--add-host worker1:172.17.0.3 \
		--add-host worker2:172.17.0.4 \
		-p 27017:27017 \
		-d mongo --smallfiles \
		--keyFile /data/keyfile/mongo-keyfile \
		--replSet 'rs1' \
		--storageEngine wiredTiger \
		--port 27017

## Enabling ReplicaSet
	sleep 10
	docker exec mongoNode1 bash -c 'mongo < /data/admin/replica.js'

## Adding Credentials 
	sleep 10
	docker exec mongoNode1 bash -c 'mongo < /data/admin/admin.js'

}

## Initializing Cluster

NodesStatus () {
	# Adding nodes to cluster 
	docker exec mongoNode1 bash -c 'mongo -u replicaAdmin -p NodePasswordKiT3  --authenticationDatabase "admin" < /data/admin/rsstatus.js'

}

AddingNodes () {
        # Adding nodes to cluster 
	read -p "Enter Node IP : " nodeip
	echo "rs.add('$nodeip:27017')" > $nodeip.js
	docker cp $nodeip.js mongoNode1:/data/admin/
        docker exec mongoNode1 bash -c "mongo -u replicaAdmin -p NodePasswordKiT3  --authenticationDatabase "admin" < /data/admin/$nodeip.js"
	rm -rf $nodeip.js
}

case $1 in
--master)

	BasicSetup
	MasterInit
;;
--addnode)
	AddingNodes
;;
--status)
	NodesStatus
;;
*)
	echo "Need valid parameter"
;;

esac

